(defwindow bar_0
  :monitor 0
  :geometry (geometry 
    :x "2px"
    :y "0%"
    :width "35px"
    :height "99%"
    :anchor "center left")

  :stacking "bg"
  :reserve (struts :distance "40px" :side "left")
  :windowtype "dock"
  :wm-ignore false

  (box
    :orientation "v"
    :space-evenly true
    (time)
    (workspaces_0)
    (bottom)
  )
)

(defwindow bar_1
  :monitor 1
  :geometry (geometry 
    :x "2px"
    :y "0%"
    :width "35px"
    :height "99%"
    :anchor "center left")

  :stacking "bg"
  :reserve (struts :distance "40px" :side "left")
  :windowtype "dock"
  :wm-ignore false

  (box
    :orientation "v"
    :space-evenly true
    (time)
    (workspaces_1)
    (bottom)
  )
)
(defvar art "/home/z4/nix-config/home-manager/dotfiles/eww/art")
  
(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")

(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defpoll year     :interval "1h"  "date +%y")

(defwidget time []
  (box
    :valign "start"
    :space-evenly false
    :spacing 3
    :orientation "v"
    :class "time"
    ; day
    ; month
    ; year
    ; (sep)
    hour 
    min
    sec
  )
)
; (defwidget top []
;   (box
;     :valign "start"
;     :halign "center"
;     :orientation "v"
;     :space-evenly true
;     (workspaces)
;   )
; )

(defwidget bottom []
  (box
    :valign "end"
    ; :halign "center"
    :orientation "v"
    :spacing 5
    :space-evenly false
    :class "bottom"
    (sys)
    (sep)
    (wifi)
    (brightness)
    (volume)
    (sep)
    (power)
  )
)

(deflisten workspace_0 "../scripts/workspaces_0")
(defwidget workspaces_0 []
  (box
    :valign "center"
    (literal :content workspace_0)
  )
)

(deflisten workspace_1 "../scripts/workspaces_1")
(defwidget workspaces_1 []
  (literal :content workspace_1)
)

(defwidget sep []
  (box
    :class "sep"
    :height 4
  )
)


(defpoll wifi_name :interval "2s" "../scripts/wifi")
(defvar wifi_expand false)
(defwidget wifi []
  (eventbox
    :onhover "${EWW_CMD} update wifi_expand=true"  
    :onhoverlost "${EWW_CMD} update wifi_expand=false"
    :onclick "nm-connection-editor &"
    (box
      :orientation "v"
      :spacing 3
      :space-evenly false
      :class "wifi"
      ; :hexpand true
      (slide-n-fade :bool wifi_expand :direction "up"
        (box
          :orientation "v"
          wifi_name
        "ÔÅ£${round(EWW_NET.wlo1.NET_DOWN/1000000, 1)}"
        "ÔÅ¢${round(EWW_NET.wlo1.NET_UP/1000000, 1)}"
        )
      )
      (image
        :path "../art/wifi.png"
        :image-width 15
      )
    )
  )
)

(defwidget sys []
  (box
    :orientation "v"
    :spacing 15
    :space-evenly true
    :hexpand: false
    :vexpand: false
    :class "sys"
    (box
      :class "ram"
      :orientation "v"
      :tooltip "${round(EWW_RAM.used_mem_perc, 0)}% RAM used."
      ; :spacing 10
      ; (label
      ;   :text "RAM"
      ; )
      (circular-progress
        :class "ram_progress"
        :start-at 0
        ; :value 10
        :value "${round(EWW_RAM.used_mem_perc, 0)}"
        :thickness 5
        :clockwise false
        (label
          :text "${round(EWW_RAM.used_mem_perc, 0)}"
        )
      )
    )
    (box
      :class "cpu"
      :orientation "v"
      :tooltip "${round(EWW_CPU.avg, 0)}% CPU used."
      ; (label
      ;   :text "CPU"
      ; )
      (circular-progress
        :class "cpu_progress"
        :start-at 0
        ; :value 10
        :value "${round(EWW_CPU.avg, 0)}"
        :thickness 5
        :clockwise false
        (label
          :text "${round(EWW_CPU.avg, 0)}"
        )
      )
    )
  )
)

(defvar show_power false)
(defwidget power []
  (box
    (eventbox
      :onclick "killall bspwm"
      :onhover "${EWW_CMD} update show_power=true"
      :onhoverlost "${EWW_CMD} update show_power=false"
      (box
        :orientation "v"
        :space-evenly false
        :class "power"
        (slide-n-fade :bool show_power :direction "down"
          (box
            :class "power_extended"
            :orientation "v"
            (button
              :onclick "exit"
              (label
                :text "Óû¢"
              )
            )
            (button
              :onclick "reboot"
              (label
                :text "Ó´í"
              )
            )
            (button
              :onclick "shutdown now"
              (label
                :text "‚≠ò"
              )
            )
          )
        )
        (label
          :text "ÔÄë"
          :class "power_icon"
        )
      )
    )
  )
)

; Volume stuff
(deflisten current_volume 'eww_volume')
(defvar show_volume false)

(defwidget volume []
  (eventbox
    :onhover "${EWW_CMD} update show_volume=true"  
    :onhoverlost "${EWW_CMD} update show_volume=false"
    (box
      :orientation "v"
      :halign "end"
      :width 20
      :spacing 3
      :space-evenly false
      :class "volume"
      :tooltip "${current_volume}%"
      ; :hexpand true
      (slide-n-fade :bool show_volume :direction "up"
        (scale
          :orientation "v"
          :flipped true
          :value current_volume
          :min 0
          :max 151
          :height 100
          :onchange "eww_volume set {}"
          ; :hexpand true
        )
      )
      (image
        :path "../art/medium-volume.png"
        :image-width 15
      )
    )
  )
)

; Brightness stuff
; (deflisten current_volume 'eww_volume')
(defvar show_brightness false)

(defwidget brightness []
  (eventbox
    :onhover "${EWW_CMD} update show_brightness=true"  
    :onhoverlost "${EWW_CMD} update show_brightness=false"
    (box
      :orientation "v"
      :halign "end"
      :width 20
      :spacing 3
      :space-evenly false
      :class "brightness"
      ; :hexpand true
      (slide-n-fade :bool show_brightness :direction "up"
        (scale
          :orientation "v"
          :flipped true
          :value current_volume
          :min 0
          :max 151
          :height 100
          :onchange "eww_volume set {}"
          ; :hexpand true
        )
      )
      (label
        :text "üîÜ"
      )
    )
  )
)

; Combination of slide and fade revealer ‚ÆØ
; See: https://elkowar.github.io/eww/widgets.html#revealer
(defwidget slide-n-fade [direction bool]
  (revealer
    :transition "slide${direction}"
    :reveal bool
    (revealer
      :transition "crossfade"
      :reveal bool
      (children)
    )
  )
)

